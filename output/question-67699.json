{"question": {"questionId": 67699, "title": "How to clone all remote branches in Git?", "favoriteCount": 1614, "userId": 117, "content": "\r\n\r\nI have a master and a development branch, both pushed to GitHub. I've cloned, pulled, and fetched, but I remain unable to get anything other than the master branch back.\n\nI'm sure I'm missing something obvious, but I have read the manual and I'm getting no joy at all.\n    ", "date": "2008-09-15 22:42:07Z", "upvoteCount": 3524, "tags": ["git", "github", "git-branch", "git-clone", "remote-branch", "git", "github", "git-branch", "git-clone", "remote-branch"], "selectedAnswer": 72156, "comments": [{"commentId": 14524625, "content": "The accepted answer here (git branch -a) shows you the branches in the remote, but if you attempt to check any of those out you will be in a 'detached HEAD' state. The next answer down (second most upvotes) answers a different question (to wit: how to pull all branches, and, again, this only works for those you're tracking locally). Several of the comments point out that you could parse the git branch -a results with a shell script that would locally track all the remote branches. Summary: There's no git native way to do what you want and it might not be all that great an idea anyway.", "date": "2012-06-18 22:43:52Z", "upvoteCount": 0, "userId": 955159}, {"commentId": 17001477, "content": "Maybe just copy the entire folder the old fashioned way? scp some_user@example.com:/home/some_user/project_folder ~ Not sure if that solution works for github though..", "date": "2012-09-26 22:51:07Z", "upvoteCount": 4, "userId": 882146}, {"commentId": 30036557, "content": "Rather than saying \"I've cloned, pulled, and fetched,\" much better to show us the exact commands that you executed.", "date": "2013-11-22 18:17:25Z", "upvoteCount": 0, "userId": 887124}, {"commentId": 64017433, "content": "It always boggles me why \"clone\" isn't in the sense of an exact copy. If it's an exact clone, shouldn't all the branches be part of the local repository? I mean isn't that one of the point of being distributed? So when something repository is gone you still have a complete copy of everything. Or is it the so called \"remote\" really are part of the local repository already?", "date": "2016-07-11 06:31:03Z", "upvoteCount": 0, "userId": 133747}, {"commentId": 65737175, "content": "Seeing all the upvotes, answers, comments on answers and the mind-boggling number of views, I think it is time git added a command for doing this. And right you are @huggie, my thoughts exactly.", "date": "2016-08-29 04:29:36Z", "upvoteCount": 0, "userId": 3375713}], "answers": [{"answerId": 72156, "content": "\r\nFirst, clone a remote Git repository and cd into it:\n\n$ git clone git://example.com/myproject\n$ cd myproject\n\n\nNext, look at the local branches in your repository:\n\n$ git branch\n* master\n\n\nBut there are other branches hiding in your repository! You can see these using the -a flag:\n\n$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n\n\nIf you just want to take a quick peek at an upstream branch, you can check it out directly:\n\n$ git checkout origin/experimental\n\n\nBut if you want to work on that branch, you'll need to create a local tracking branch which is done automatically by:\n\n$ git checkout experimental\n\n\nand you will see\n\nBranch experimental set up to track remote branch experimental from origin.\nSwitched to a new branch 'experimental'\n\n\nThat last line throws some people: \"New branch\" - huh?\nWhat it really means is that the branch is taken from the index and created locally for you.  The previous line is actually more informative as it tells you that the branch is being set up to track the remote branch, which usually means the origin/branch_name branch \n\nNow, if you look at your local branches, this is what you'll see:\n\n$ git branch\n* experimental\n  master\n\n\nYou can actually track more than one remote repository using git remote.\n\n$ git remote add win32 git://example.com/users/joe/myproject-win32-port\n$ git branch -a\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n  remotes/win32/master\n  remotes/win32/new-widgets\n\n\nAt this point, things are getting pretty crazy, so run gitk to see what's going on:\n\n$ gitk --all &\n\n    ", "comments": [{"commentId": 759824, "content": "How can someone create automatically all the remote branches, e.g. experimental for origin/experimental?", "date": "2009-06-04 16:33:36Z", "upvoteCount": 0, "userId": 12892}, {"commentId": 975098, "content": "Cristian: I used to always create a branch 'foo' for every branch 'origin/foo', but this led to two problems: (1) I wound up with lots of really stale tracking branches that were many commits behind the corresponding remote branch, and (2) in older versions of git, running 'git push' would attempt to push all my local branches to a remote, even when those branches were stale. So now I only keep local branches for things that I'm actively developing, and access the origin/* branches directly if I need information about them.  (That said, you could use a shell script to parse 'git branch -a'.)", "date": "2009-07-20 21:44:51Z", "upvoteCount": 0, "userId": 12089}, {"commentId": 2170694, "content": "\"git fetch <origin-name> <branch-name>\" brings the branch down locally for you.", "date": "2010-02-07 17:10:29Z", "upvoteCount": 0, "userId": 67627}, {"commentId": 4248688, "content": "Good answer, but kinda misses the question. I was looking for a one-liner to checkout all the remote branches.", "date": "2010-10-19 21:01:04Z", "upvoteCount": 0, "userId": 64313}, {"commentId": 4339838, "content": "The question was about cloning all remote branches, not checking them out. And, as I noted above, you really don't want to make any more local tracking branches than necessary, because when they get really stale, they can cause headaches.", "date": "2010-10-28 12:43:44Z", "upvoteCount": 0, "userId": 12089}], "upvoteCount": 3988, "userId": 12089, "date": "2008-09-16 13:28:22Z"}, {"answerId": 4682612, "content": "\r\nIf you have many remote branches that you want to fetch at once, do:\n\n$ git pull --all\n\n\nNow you can checkout any branch as you need to, without hitting the remote repository.\n    ", "comments": [{"commentId": 11338018, "content": "If I do git clone, I have the master branch locally and 10 branches \"remote\". So THIS answer by Gabe was very helpful and answers the question.", "date": "2012-01-27 19:07:30Z", "upvoteCount": 0, "userId": 356815}, {"commentId": 11619362, "content": "this only fetch remote branches that have been locally added not any remote branch", "date": "2012-02-10 11:45:59Z", "upvoteCount": 0, "userId": 174027}, {"commentId": 12850443, "content": "The first command is redundant.  Simply git pull --all will do the same \u2013 it just won't fetch twice.  And infosec812 is right that this does not answer the question anyway.  I wonder how this got so many upvotes.", "date": "2012-04-06 14:03:57Z", "upvoteCount": 0, "userId": 279627}, {"commentId": 20436319, "content": "After I did git remote update, then tried git branch, I only see local branches.  But if I do git branch -a I can now see the remote branches and I can do a git pull <branchname> to get the branch I want. -- I landed on this question from a Google search, and this answer solves my problem.", "date": "2013-01-31 16:47:57Z", "upvoteCount": 0, "userId": 332472}, {"commentId": 22732283, "content": "This is not helpful at all, doesn't pull any remote branches other than that is existing.", "date": "2013-04-11 15:02:56Z", "upvoteCount": 0, "userId": 1523910}], "upvoteCount": 737, "userId": 283398, "date": "2011-01-13 16:42:40Z"}, {"answerId": 4754797, "content": "\r\nThis Bash script helped me out:\n\n#!/bin/bash\nfor branch in $(git branch --all | grep '^\\s*remotes' | egrep --invert-match '(:?HEAD|master)$'); do\n    git branch --track \"${branch##*/}\" \"$branch\"\ndone\n\n\nIt will create tracking branches for all remote branches, except master (which you probably got from the original clone command). I think you might still need to do a \n\ngit fetch --all\ngit pull --all\n\n\nto be sure.\n\n\n  One liner: git branch -a | grep -v HEAD | perl -ne 'chomp($_); s|^\\*?\\s*||; if (m|(.+)/(.+)| && not $d{$2}) {print qq(git branch --track $2 $1/$2\\n)} else {$d{$_}=1}' | csh -xfs As usual: test in your setup before copying rm -rf universe as we know it \n  \n  Credits for one-liner go to user cfi\n\n    ", "comments": [{"commentId": 9673342, "content": "This is really close to being a perfect solution.. The only thing that would make it better is if this functionality were built-in as an option in git.", "date": "2011-10-27 17:15:12Z", "upvoteCount": 0, "userId": 780998}, {"commentId": 16784971, "content": "\"One liner\": git branch -a | grep -v HEAD | perl -ne 'chomp($_); s|^\\*?\\s*||; if (m|(.+)/(.+)| && not $d{$2}) {print qq(git branch --track $2 $1/$2\\n)} else {$d{$_}=1}' | csh -xfs   As usual: test in your setup before copying rm -rf universe as we know it", "date": "2012-09-18 12:38:54Z", "upvoteCount": 0, "userId": 923794}, {"commentId": 34295305, "content": "This command creates the feature branches from remote as normal branches (not feature branches) - how to fix this?", "date": "2014-03-20 14:31:48Z", "upvoteCount": 3, "userId": 1861622}, {"commentId": 44202169, "content": "if you run into issues with \"/\" in branch names there is a solution below using a git alias. see answer by \"nobody\" on \"answered May 15 '13 at 11:02\"", "date": "2015-01-12 11:54:18Z", "upvoteCount": 3, "userId": 1048093}, {"commentId": 50364940, "content": "I'm trimming just remotes/origin/ to preserve namespaces: for BRANCH in $(git branch -a | grep remotes | grep -v HEAD | grep -v master); do git branch --track \"${BRANCH#remotes/origin/}\" \"${BRANCH}\"; done", "date": "2015-07-02 08:33:47Z", "upvoteCount": 0, "userId": 547223}], "upvoteCount": 376, "userId": 583867, "date": "2011-01-21 02:18:36Z"}, {"answerId": 7216269, "content": "\r\nUsing the --mirror option seems to copy the remote tracking branches properly.\nHowever, it sets up the repository as a bare repository, so you have to turn it back into a normal repository afterwards.\n\ngit clone --mirror path/to/original path/to/dest/.git\ncd path/to/dest\ngit config --bool core.bare false\ngit checkout anybranch\n\n\nReference: Git FAQ: How do I clone a repository with all remotely tracked branches? \n    ", "comments": [{"commentId": 11024120, "content": "You know this actually seems to be a pretty good answer even though it has no votes. Are there any pitfalls to doing it that way? I had to explicitly checkout a branch after running those commands.", "date": "2012-01-12 04:25:11Z", "upvoteCount": 0, "userId": 4704515}, {"commentId": 16629204, "content": "This combined with git push --mirror are exactly what I needed to create an exact duplicate of a remote git repo when moving from github.com to a github enterprise install.  Thanks!", "date": "2012-09-11 22:59:53Z", "upvoteCount": 0, "userId": 506537}, {"commentId": 16777859, "content": "@Dave: Add a final git checkout as last command to finally checkout the head of the current branch on the cloned repo. This is a great answer, by far the best. Be brave, eventually we'll get you to the top :-)", "date": "2012-09-18 07:37:29Z", "upvoteCount": 3, "userId": 923794}, {"commentId": 16783894, "content": "@Dave: Hm. I'm having second thoughts: --mirror does more than just setting up all branches as being tracked. It copies all refs from the origin and subsequent git remote update will do that again. Behaviour of pulls change. I'm back to believing the full copy requires a one-line script.", "date": "2012-09-18 11:53:06Z", "upvoteCount": 3, "userId": 923794}, {"commentId": 23964548, "content": "git clone --mirror is very good for backing up your git repositories ^_^", "date": "2013-05-20 21:19:43Z", "upvoteCount": 4, "userId": 645491}], "upvoteCount": 264, "userId": 915724, "date": "2011-08-27 17:49:44Z"}, {"answerId": 10563611, "content": "\r\nYou can easily switch to a branch without using the fancy \"git checkout -b somebranch origin/somebranch\" syntax.  You can just do:\n\ngit checkout somebranch\n\n\nGit will automatically do the right thing:\n\n$ git checkout somebranch\nBranch somebranch set up to track remote branch somebranch from origin.\nSwitched to a new branch 'somebranch'\n\n\nGit will check whether a branch with the same name exists in exactly one remote, and if it does, it tracks it the same way as if you had explicitly specified that it's a remote branch. From the git-checkout man page of Git 1.8.2.1:\n\n\n  If <branch> is not found but there does exist a tracking branch in\n  exactly one remote (call it <remote>) with a matching name, treat as\n  equivalent to\n\n$ git checkout -b <branch> --track <remote>/<branch>\n\n\n    ", "comments": [{"commentId": 14442258, "content": "So, if the name of the branch you checkout is the identical to the name of the remote branch, everything after the \"/\", then git will create a branch of the same name, everything after the \"/\", \"tracking\" that remote? And by tracking, we mean: git push, git pull, etc. will be done on that remote? If this is correct, then expand on your answer with more information, because I aggree with @Daniel, this answer deserves more rep.", "date": "2012-06-14 22:08:23Z", "upvoteCount": 1, "userId": 934739}, {"commentId": 14885634, "content": "@BullfrogBlues, the answer to all your questions appears to be yes (I'm using git v1.7.7.4). I agree this behavior should be better known. (It's not in the manual for this version of git.) I actually don't like this behavior, I'd rather get an error and have to say git checkout --track origin/somebranch explicitly.", "date": "2012-07-03 13:05:56Z", "upvoteCount": 0, "userId": 272427}, {"commentId": 21256957, "content": "@dubiousjim: Actually, this is in the manual. git-checkout(1) says: \"If <branch> is not found but there does exist a tracking branch in exactly one remote (call it <remote>) with a matching name, treat as equivalent to 'git checkout -b <branch> --track <remote>/<branch>' \" (Git V.1.8.1.1).", "date": "2013-02-27 09:01:33Z", "upvoteCount": 3, "userId": 43681}, {"commentId": 71801010, "content": "What we need is $ git pull * <remote>/* - where \"*\" is a wildcard, so it pulls all branches, including those not yet on the local system.  How to do this?  Are we really supposed to checkout/pull every branch just to get the code pulled to our local system?", "date": "2017-02-19 05:27:35Z", "upvoteCount": 0, "userId": 2326613}], "upvoteCount": 202, "userId": 856199, "date": "2012-05-12 12:11:54Z"}, {"answerId": 1186645, "content": "\r\nRegarding,\n\n\n  $ git checkout -b experimental origin/experimental\n\n\nusing\n\n$ git checkout -t origin/experimental\n\n\nor the more verbose but easier to remember\n\n$ git checkout --track origin/experimental\n\n\nmight be better, in terms of tracking a remote repository. \n    ", "comments": [], "upvoteCount": 86, "userId": 144330, "date": "2009-07-27 06:10:37Z"}, {"answerId": 67748, "content": "\r\nThe fetch that you are doing should get all the remote branches, but it won't create local branches for them. If you use gitk, you should see the remote branches described as \"remotes/origin/dev\" or something similar.\n\nTo create a local branch based on a remote branch, do something like:\n\ngit checkout -b dev refs/remotes/origin/dev\n\nWhich should return something like:\n\nBranch dev set up to track remote branch refs/remotes/origin/dev.\nSwitched to a new branch \"dev\"\n\nNow, when you are on the dev branch, \"git pull\" will update your local dev to the same point as the remote dev branch.  Note that it will fetch all branches, but only pull the one you are on to the top of the tree.\n    ", "comments": [{"commentId": 10572, "content": "You don't need refs/remotes here. git checkout -b dev origin/dev will work fine.", "date": "2008-09-17 13:10:34Z", "upvoteCount": 0, "userId": 12089}, {"commentId": 14886318, "content": "This will always work: git checkout -b newlocaldev --track origin/dev. If you want the local branch has the same name as the remote one, and the remote one doesn't have a tricky name, you can omit the -b newlocaldev. With the default branch.autosetupmerge config setting, and assuming you don't have a local branch named dev, these two commands may do the same thing: git checkout -b dev origin/dev and just plain git checkout dev. Finally, git checkout origin/dev doesn't create a new branch, but just puts you in detached HEAD state.", "date": "2012-07-03 13:27:25Z", "upvoteCount": 3, "userId": 272427}, {"commentId": 66475710, "content": "What happens when the remote no longer exists but Git is too stupid to acknowledge its been deleted? This assumes you updated and git branch -a continues to lists it as a remote branch.", "date": "2016-09-19 22:14:42Z", "upvoteCount": 0, "userId": 608639}, {"commentId": 71801015, "content": "And we do this for dozens of branches?", "date": "2017-02-19 05:28:33Z", "upvoteCount": 0, "userId": 2326613}], "upvoteCount": 76, "userId": 10394, "date": "2008-09-15 22:52:51Z"}, {"answerId": 67716, "content": "\r\nWhen you do \"git clone git://location\", all branches and tags are fetched.\n\nIn order to work on top of a specific remote branch, assuming it's the origin remote:\n\ngit checkout -b branch origin/branchname\n\n    ", "comments": [{"commentId": 29840912, "content": "I appreciate your note \"all branches and tags are fetched\". I was going to comment on your answer being wrong, but then I checked it and found, you are perfectly right. So in a way, you have provided the shortest answer - if you cloned, you already have it. Nice. One could try to add: try $ git branch -a to learn, what remote branches are already available.", "date": "2013-11-17 22:39:47Z", "upvoteCount": 0, "userId": 346478}], "upvoteCount": 56, "userId": 1277510, "date": "2008-09-15 22:47:00Z"}, {"answerId": 16563327, "content": "\r\nUse aliases. Though there aren't any native Git one-liners, you can define your own as\n\ngit config --global alias.clone-branches '! git branch -a | sed -n \"/\\/HEAD /d; /\\/master$/d; /remotes/p;\" | xargs -L1 git checkout -t'\n\n\nand then use it as\n\ngit clone-branches\n\n    ", "comments": [], "upvoteCount": 46, "userId": 2383918, "date": "2013-05-15 11:02:27Z"}, {"answerId": 20783081, "content": "\r\nThis isn't too much complicated, very simple and straight forward steps are as follows;\n\ngit fetch origin This will bring all the remote branches to your local.\n\ngit branch -a This will show you all the remote branches.\n\ngit checkout --track origin/<branch you want to checkout>\n\nVerify whether you are in the desired branch by the following command;\n\ngit branch\n\n\nThe output will like this;\n\n*your current branch \nsome branch2\nsome branch3 \n\n\nNotice the * sign that denotes the current branch.\n    ", "comments": [{"commentId": 49472286, "content": "Thanks suraj. The reason because its not been voted much. And the ans is not accepted by the questioner.", "date": "2015-06-08 11:03:16Z", "upvoteCount": 1, "userId": 1776255}, {"commentId": 61507253, "content": "The \"git fetch origin\" did not bring any of the remote branches to my local - or are they hidden somewhere?  Reading all the answers above gave me a headache.  We are looking for \"git fetch all branches to local\".  There must be a way aside from bash-scripts to do this.", "date": "2016-05-02 06:12:17Z", "upvoteCount": 0, "userId": 2326613}, {"commentId": 62906610, "content": "Just after you execute \"git fetch origin\", it will show the output like this in your terminal - \"* [new branch]      branch_name -> origin/branch_name\", but when you run \"git branch\" it will show you only your local branches instead, so to see all the branches you can do \"git branch -a\" and then to switch to the remote branch you need to run \" git checkout --track origin/<branch you want to checkout>\". Hope this helps. :-)", "date": "2016-06-09 04:24:44Z", "upvoteCount": 1, "userId": 1776255}, {"commentId": 71802664, "content": "Suraj, because the question was, how to \"clone all remote branches\" - not how to manually update one at a time.  It appears there is no answer to the actual question - just ways to do a whole lot of typing if you have a lot of branches.", "date": "2017-02-19 07:38:59Z", "upvoteCount": 2, "userId": 2326613}, {"commentId": 73953378, "content": "It worked for me. Thanks buddy !!", "date": "2017-04-17 09:36:58Z", "upvoteCount": 0, "userId": 4256719}], "upvoteCount": 43, "userId": 1776255, "date": "2013-12-26 10:19:21Z"}, {"answerId": 22199624, "content": "\r\nWhy you only see \"master\"\n\ngit clone downloads all remote remote branches but still considers them \"remote\", even though the files are located in your new repository. There's one exception to this, which is that the cloning process creates a local branch called \"master\" from the remote branch called \"master\". By default, git branch only shows local branches, which is why you only see \"master\".\n\ngit branch -a shows all branches, including remote branches.\n\n\n\nHow to get local branches\n\nIf you actually want to work on a branch, you'll probably want a \"local\" version of it. To simply create local branches from remote branches (without checking them out and thereby changing the contents of your working directory), you can do that like this:\n\ngit branch branchone origin/branchone\ngit branch branchtwo origin/branchtwo\ngit branch branchthree origin/branchthree\n\n\nIn this example, branchone is the name of a local branch you're creating based on origin/branchone; if you instead want to create local branches with different names, you can do this:\n\ngit branch localbranchname origin/branchone\n\n\nOnce you've created a local branch, you can see it with git branch (remember, you don't need -a to see local branches).\n    ", "comments": [{"commentId": 86073206, "content": "Thanks for the explanation of why only master is the only visible branch", "date": "2018-03-28 11:39:22Z", "upvoteCount": 0, "userId": 5258801}], "upvoteCount": 40, "userId": 3198108, "date": "2014-03-05 13:47:03Z"}, {"answerId": 6186997, "content": "\r\nJust do this:\n\n$ git clone git://example.com/myproject\n$ cd myproject\n$ git checkout branchxyz\nBranch branchxyz set up to track remote branch branchxyz from origin.\nSwitched to a new branch 'branchxyz'\n$ git pull\nAlready up-to-date.\n$ git branch\n* branchxyz\n  master\n$ git branch -a\n* branchxyz\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/branchxyz\n  remotes/origin/branch123\n\n\nYou see, 'git clone git://example.com/myprojectt' fetches everything, even the branches, you just have to checkout them, then your local branch will be created.\n    ", "comments": [], "upvoteCount": 36, "userId": 777553, "date": "2011-05-31 11:40:02Z"}, {"answerId": 13575102, "content": "\r\nBetter late than never, but here is the best way to do this:\n\nmkdir repo\ncd repo\ngit clone --bare path/to/repo.git .git\ngit config --unset core.bare\ngit reset --hard\n\n\nAt this point you have a complete copy of the remote repo with all of it's branches (verify with git branch).  You can use --mirror instead of --bare if your remote repo has remotes of its own.\n    ", "comments": [{"commentId": 33698575, "content": "Something went wrong during the edits here. Now this answer doesn't make sense. The \"--bare\" mentioned in the last sentence doesn't exist in the given command list.", "date": "2014-03-05 13:11:15Z", "upvoteCount": 0, "userId": 3198108}, {"commentId": 41828643, "content": "taking from Dave's answer below. Using 'git config --bool core.bare false' instead of 'git config unset core.bare' seems to do the job.", "date": "2014-10-28 12:25:07Z", "upvoteCount": 0, "userId": 256935}, {"commentId": 54225975, "content": "I have the error: key does not contain a section: unset. The Dave's answer works better.", "date": "2015-10-19 09:24:01Z", "upvoteCount": 0, "userId": 938111}, {"commentId": 74807711, "content": "It's git config --unset core.bare actually... To me, this seems the cleanest solution of all presented in the answers here. A pity it has so few upvotes...", "date": "2017-05-10 08:05:14Z", "upvoteCount": 0, "userId": 1512592}, {"commentId": 76619827, "content": "Thanks @ChrisSim I agree for git config --bool core.bare false. This is why I recommend instead the Dave's answer. What do you think about the Dave's answer? Cheers", "date": "2017-06-29 08:24:32Z", "upvoteCount": 1, "userId": 938111}], "upvoteCount": 35, "userId": 506537, "date": "2012-11-26 23:42:29Z"}, {"answerId": 67712, "content": "\r\nA git clone is supposed to copy the entire repository.  Try cloning it, and then run git branch -a.  It should list all the branches.  If then you want to switch to branch \"foo\" instead of \"master\", use git checkout foo.\n    ", "comments": [{"commentId": 6207, "content": "You can run git commands with or without the hyphen. Both \"git-branch\" and \"git branch\" will work.", "date": "2008-09-15 22:55:19Z", "upvoteCount": 1, "userId": 9360}, {"commentId": 33698316, "content": "Maybe this answer was given a long time ago when git worked differently, but I think it's misleading today. git clone does download all the remote branches, but it only makes a local branch of master. Since git branch only shows local branches, you need git branch -a to see remote branches, too.", "date": "2014-03-05 13:05:12Z", "upvoteCount": 0, "userId": 3198108}, {"commentId": 67790280, "content": "Thank you.  This is kind of strange default behavior IMO.  I'll just chalk it up to more cryptic gitness.  If it downloaded the branches, why would it hide them when calling git branch?", "date": "2016-10-26 14:27:51Z", "upvoteCount": 0, "userId": 4076764}, {"commentId": 80929425, "content": "@Cerran, thanks; I've updated my answer accordingly.", "date": "2017-10-28 15:34:38Z", "upvoteCount": 0, "userId": 10354}, {"commentId": 83787427, "content": "\"does download all the remote branches, but it only makes a local branch of master\".  I need help understanding this.  It seems git clone does NOT clone any branches except master, as when you do \"git branch -a\" it shows that the \"develop\" branch is only at \"remotes/origin/develop\". This must be  saying that you dont have this branch anywhere locally, it only exists currently on the origin right?", "date": "2018-01-23 10:47:40Z", "upvoteCount": 0, "userId": 1072187}], "upvoteCount": 22, "userId": 10354, "date": "2008-09-15 22:46:08Z"}, {"answerId": 27020944, "content": "\r\nYou only need to use \"git clone\" to get all branches.\n\ngit clone <your_http_url>\n\n\nEven though you only see master branch, you can use \"git branch -a\" to see all branches.\n\ngit branch -a\n\n\nAnd you can switch to any branch which you already have.\n\ngit checkout <your_branch_name>\n\n\nDon't worry that after you \"git clone\", you don't need to connect with the remote repo, \"git branch -a\" and \"git checkout \" can be run successfully when you close your wifi. So it is proved that when you do \"git clone\", it already has copied all branches from the remote repo. After that, you don't need the remote repo, your local already has all branches' codes.  \n    ", "comments": [], "upvoteCount": 19, "userId": 2730862, "date": "2014-11-19 15:43:04Z"}, {"answerId": 108203, "content": "\r\nUse my tool git_remote_branch (you need Ruby installed on your machine). It's built specifically to make remote branch manipulations dead easy.\n\nEach time it does an operation on your behalf, it prints it in red at the console. Over time, they finally stick into your brain :-)\n\nIf you don't want grb to run commands on your behalf, just use the 'explain' feature. The commands will be printed to your console instead of executed for you.\n\nFinally, all commands have aliases, to make memorization easier.\n\nNote that this is alpha software ;-)\n\nHere's the help when you run grb help:\n\n\ngit_remote_branch version 0.2.6\n\n  Usage:\n\n  grb create branch_name [origin_server] \n\n  grb publish branch_name [origin_server] \n\n  grb rename branch_name [origin_server] \n\n  grb delete branch_name [origin_server] \n\n  grb track branch_name [origin_server] \n\n\n\n  Notes:\n  - If origin_server is not specified, the name 'origin' is assumed \n    (git's default)\n  - The rename functionality renames the current branch\n\n  The explain meta-command: you can also prepend any command with the \nkeyword 'explain'. Instead of executing the command, git_remote_branch \nwill simply output the list of commands you need to run to accomplish \nthat goal.\n\n  Example: \n    grb explain create\n    grb explain create my_branch github\n\n  All commands also have aliases:\n  create: create, new\n  delete: delete, destroy, kill, remove, rm\n  publish: publish, remotize\n  rename: rename, rn, mv, move\n  track: track, follow, grab, fetch\n\n    ", "comments": [{"commentId": 6666743, "content": "Word to the wise:  It looks like this project was abandoned around the time this answer was posted.  I can't find any updates after 2008.  Caveat emptor and all that.  If I'm wrong, I hope someone will edit and provide a current pointer, because I'd love to have a tool like this handy.", "date": "2011-04-27 21:53:31Z", "upvoteCount": 0, "userId": 40093}], "upvoteCount": 18, "userId": 6349, "date": "2008-09-20 13:53:58Z"}, {"answerId": 28617347, "content": "\r\nLooking at one of answers to the question I noticed that it's possible to shorten it:\n\nfor branch in  `git branch -r | grep -v 'HEAD\\|master'`; do  \n git branch --track ${branch##*/} $branch;\ndone\n\n\nBut beware, if one of remote branches is named as e.g. admin_master  it won't get downloaded!\n\nThanks to bigfish for original idea\n    ", "comments": [{"commentId": 54825333, "content": "You can improve the regex, or maybe use Awk instead of grep, to improve the filter to avoid false positives.", "date": "2015-11-04 12:37:08Z", "upvoteCount": 0, "userId": 874188}, {"commentId": 65890485, "content": "all the branches are 'origin\\my_branch_name', which is not definitely what I want.", "date": "2016-09-01 17:49:46Z", "upvoteCount": 0, "userId": 3375713}, {"commentId": 74699199, "content": "I've not seen the construct ${branch##*/} before - looks really useful - any idea where I can find out more on that? can't seem to find under bash anywhere. Thx.", "date": "2017-05-07 11:44:06Z", "upvoteCount": 0, "userId": 521893}], "upvoteCount": 12, "userId": 758158, "date": "2015-02-19 21:33:08Z"}, {"answerId": 34122093, "content": "\r\nall the answers I saw here are valid but there is a much cleaner way to clone a repository and to pull all the branches at once. \n\nWhen you clone a repository all the information of the branches is actually downloaded but the branches are hidden. With the command\n\n$ git branch -a\n\n\nyou can show all the branches of the repository, and with the command\n\n$ git checkout -b branchname origin/branchname\n\n\nyou can then \"download\" them manually one at a time. \n\n\n\nHowever, when you want to clone a repo with a lot of branches all the ways illustrated are above are lengthy and tedious in respect to a much cleaner and quicker way that I am going to show, though it's a bit complicated. You need three steps to accomplish this:\n\n\nFirst step\n\n\ncreate a new empty folder on your machine and clone a mirror copy of the .git folder from the repository:\n\n$ cd ~/Desktop && mkdir my_repo_folder && cd my_repo_folder\n$ git clone --mirror https://github.com/planetoftheweb/responsivebootstrap.git .git\n\n\nthe local repository inside the folder my_repo_folder is still empty, there is just a hidden .git folder now that you can see with a \"ls -alt\" command from the terminal.\n\n\nSecond step\n\n\nswitch this repository from an empty (bare) repository to a regular repository by switching the boolean value \"bare\" of the git configurations to false:\n\n$ git config --bool core.bare false\n\n\n\nThird Step\n\n\nGrab everything that inside the current folder and create all the branches on the local machine, therefore making this a normal repo. \n\n$ git reset --hard\n\n\nSo now you can just type the command \"git branch\" and you can see that all the branches are downloaded. \n\nThis is the quick way in which you can clone a git repository with all the branches at once, but it's not something you wanna do for every single project in this way. \n    ", "comments": [], "upvoteCount": 12, "userId": 3245486, "date": "2015-12-06 20:08:41Z"}, {"answerId": 45257871, "content": "\r\nOK, when you clone your repo, you have all branches there...\n\nIf you just do git branch, they are kind of hidden...\n\nSo if you'd like to see all branches name, just simply add --all flag like this:\n\ngit branch --all or git branch -a\n\nIf you just checkout to the branch, you get all you need.\n\nBut how about if the branch created by someone else after you clone?\n\nIn this case, just do:\n\ngit fetch\n\nand check all branches again...\n\nIf you like to fetch and checkout at the same time, you can do:\n\ngit fetch && git checkout your_branch_name\n\nAlso created the image below for you to simplify what I said:\n\n\n    ", "comments": [{"commentId": 85101393, "content": "There is a difference between \"you have it\" and \"you see it\". git branch -all will NOT list the remote branches any more when you remove the remote repository.", "date": "2018-03-01 11:23:34Z", "upvoteCount": 0, "userId": 4428150}], "upvoteCount": 9, "userId": 5423108, "date": "2017-07-22 18:29:55Z"}, {"answerId": 4414131, "content": "\r\nI needed to do exactly the same. Here is my Ruby script.\n\n#!/usr/bin/env ruby\n\nlocal = []\nremote = {}\n\n# Prepare\n%x[git reset --hard HEAD]\n%x[git checkout master] # Makes sure that * is on master.\n%x[git branch -a].each_line do |line|\n  line.strip!\n  if /origin\\//.match(line)\n     remote[line.gsub(/origin\\//, '')] = line\n   else\n     local << line\n   end\nend\n# Update \nremote.each_pair do |loc, rem|\n  next if local.include?(loc)\n  %x[git checkout --track -b #{loc} #{rem}]\nend\n%x[git fetch]\n\n    ", "comments": [], "upvoteCount": 8, "userId": 43685, "date": "2010-12-10 23:12:39Z"}, {"answerId": 20697765, "content": "\r\nFor copy-paste into command line:\n\ngit checkout master ; remote=origin ; for brname in `git branch -r | grep $remote | grep -v master | grep -v HEAD | awk '{gsub(/^[^\\/]+\\//,\"\",$1); print $1}'`; do git branch -D $brname ; git checkout -b $brname $remote/$brname ; done ; git checkout master\n\n\nFor more readibility:\n\ngit checkout master ;\nremote=origin ;\nfor brname in `\n    git branch -r | grep $remote | grep -v master | grep -v HEAD \n    | awk '{gsub(/^[^\\/]+\\//,\"\",$1); print $1}'\n`; do\n    git branch -D $brname ;\n    git checkout -b $brname $remote/$brname ;\ndone ;\ngit checkout master\n\n\n\nThis will:\n\n\ncheck out master (so that we can delete branch we are on)\nselect remote to checkout (change it to whatever remote you have)\nloop through all branches of the remote except master and HEAD\n\n\ndelete local branch (so that we can check out force-updated branches)\ncheck out branch from the remote\n\ncheck out master (for the sake of it)\n\n\nBased on answer of VonC.\n    ", "comments": [], "upvoteCount": 8, "userId": 1998046, "date": "2013-12-20 06:38:02Z"}, {"answerId": 42428398, "content": "\r\nCloning from a local repo will not work with git clone & git fetch: a lot of branches/tags will remain unfetched.\n\nTo get a clone with all branches and tags.\n\ngit clone --mirror git://example.com/myproject myproject-local-bare-repo.git\n\n\nTo get a clone with all branches and tags but also with a working copy:\n\ngit clone --mirror git://example.com/myproject myproject/.git\ncd myproject\ngit config --unset core.bare\ngit config receive.denyCurrentBranch updateInstead\ngit checkout master\n\n    ", "comments": [], "upvoteCount": 8, "userId": 99248, "date": "2017-02-23 23:55:10Z"}, {"answerId": 35948878, "content": "\r\nUse commands that you can remember\n\nI'm using Bitbucket, a Repository Hosting Service of Atlassian. So I try to follow their docs. And that works perfectly for me. With the following easy and short commands you can checkout your remote branch.\n\nAt first clone your repository, then change into the destination folder. And last but not least fetch and checkout:\n\ngit clone <repo> <destination_folder>\ncd <destination_folder>\ngit fetch && git checkout <branch>\n\n\nThat's it. Here a litte more real world example:\n\ngit clone https://username@bitbucket.org/team/repository.git project_folder\ncd project_folder\ngit fetch && git checkout develop\n\n\nYou will find detail information about the commands in the docs:\nClone Command, Fetch Command, Checkout Command\n    ", "comments": [], "upvoteCount": 6, "userId": 3432865, "date": "2016-03-11 20:01:06Z"}, {"answerId": 36322324, "content": "\r\nGit usually (when not specified) fetches all branches and/or tags (refs, see: git ls-refs) from one or more other repositories along with the objects necessary to complete their histories. In other words it fetches the objects which are reachable by the objects that are already downloaded. See: What does git fetch really do?\n\nSometimes you may have branches/tags which aren't directly connected to the current one, so git pull --all/git fetch --all won't help in that case, but you can list them by:\n\ngit ls-remote -h -t origin\n\n\nand fetch them manually by knowing the ref names.\n\nSo to fetch them all, try:\n\ngit fetch origin --depth=10000 $(git ls-remote -h -t origin)\n\n\nThe --depth=10000 parameter may help if you've shallowed repository.\n\nThen check all your branches again:\n\ngit branch -avv\n\n\n\n\nIf above won't help, you need to add missing branches manually to the tracked list (as they got lost somehow):\n\n$ git remote -v show origin\n...\n  Remote branches:\n    master      tracked\n\n\nby git remote set-branches like:\n\ngit remote set-branches --add origin missing_branch\n\n\nso it may appear under remotes/origin after fetch:\n\n$ git remote -v show origin\n...\n  Remote branches:\n    missing_branch new (next fetch will store in remotes/origin)\n$ git fetch\nFrom github.com:Foo/Bar\n * [new branch]      missing_branch -> origin/missing_branch\n\n\n\n\nTroubleshooting\n\nIf you still cannot get anything other than the master branch, check the followings:\n\n\nDouble check your remotes (git remote -v), e.g.\n\n\nValidate that git config branch.master.remote is origin.\nCheck if origin points to the right URL via: git remote show origin (see this post).\n\n\n    ", "comments": [], "upvoteCount": 6, "userId": 55075, "date": "2016-03-31 00:48:48Z"}, {"answerId": 37906446, "content": "\r\nI wrote this small Powershell functions to be able to checkout all my git branches, that are on origin remote.\n\nFunction git-GetAllRemoteBranches {\n     iex \"git branch -r\"                       <# get all remote branches #> `\n     | % { $_ -Match \"origin\\/(?'name'\\S+)\" }  <# select only names of the branches #> `\n     | % { Out-Null; $matches['name'] }        <# write does names #>\n}\n\n\nFunction git-CheckoutAllBranches {\n    git-GetAllRemoteBranches `\n        | % { iex \"git checkout $_\" }          <# execute ' git checkout <branch>' #>\n}\n\n\nMore git functions can be found on my git settings repo\n    ", "comments": [], "upvoteCount": 6, "userId": 545918, "date": "2016-06-19 10:54:23Z"}, {"answerId": 41082358, "content": "\r\n#!/bin/bash\nfor branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master `; do\n   git branch --track ${branch#remotes/origin/} $branch\ndone\n\n\nThese code will pull all remote branches code to local repo.\n    ", "comments": [{"commentId": 73913162, "content": "ref. coderwall.com/p/0ypmka/git-clone-all-remote-branches-locally", "date": "2017-04-15 15:13:49Z", "upvoteCount": 0, "userId": 1882064}], "upvoteCount": 6, "userId": 770627, "date": "2016-12-11 02:20:42Z"}, {"answerId": 43551285, "content": "\r\nAs of early 2017, the answer in this comment works:\n\ngit fetch <origin-name> <branch-name> brings the branch down for you. While this doesn't pull all branches at once, you can singularly execute this per-branch.\n    ", "comments": [], "upvoteCount": 6, "userId": 210780, "date": "2017-04-21 20:14:17Z"}, {"answerId": 28115781, "content": "\r\nNone of these answers cut it, except user nobody is on the right track.\n\nI was having trouble with moving a repo from one server/system to another. When I cloned the repo, it only created a local branch for master so when I pushed to the new remote, only master branch was pushed.\n\nSo I found these two methods VERY useful. Hope they help someone else.\n\nMethod 1:\n\ngit clone --mirror OLD_REPO_URL\ncd new-cloned-project\nmkdir .git\nmv * .git\ngit config --local --bool core.bare false\ngit reset --hard HEAD\ngit remote add newrepo NEW_REPO_URL\ngit push --all newrepo\ngit push --tags newrepo\n\n\nMethod 2:\n\ngit config --global alias.clone-branches '! git branch -a | sed -n \"/\\/HEAD /d; /\\/master$/d; /remotes/p;\" | xargs -L1 git checkout -t'\ngit clone OLD_REPO_URL\ncd new-cloned-project\ngit clone-branches\ngit remote add newrepo NEW_REPO_URL\ngit push --all newrepo\ngit push --tags newrepo\n\n    ", "comments": [], "upvoteCount": 5, "userId": 1053611, "date": "2015-01-23 17:51:19Z"}, {"answerId": 32501388, "content": "\r\nHere is another short one-liner command which\ncreates local branches for all remote branches:\n\n(git branch -r | sed -n '/->/!s#^  origin/##p' && echo master) | xargs -L1 git checkout\n\n\nIt works also properly if tracking local branches are already created.\nYou can call it after the first git clone or any time later.\n\nIf you do not need to have master branch checked out after cloning, use \n\ngit branch -r | sed -n '/->/!s#^  origin/##p'| xargs -L1 git checkout\n\n    ", "comments": [], "upvoteCount": 5, "userId": 1182783, "date": "2015-09-10 12:04:08Z"}, {"answerId": 17635744, "content": "\r\nI'm going to add my 2 cents here because I got here trying to find out how to pull down a remote branch I had deleted locally. Origin was not mine, and I didn't want to go through the hassle of re-cloning everything \n\nThis worked for me:\n\nassuming you need to recreate the branch locally:\n\ngit checkout -b recreated-branch-name\ngit branch -a (to list remote branches)\ngit rebase remotes/remote-origin/recreated-branch-name\n\n\nSo if I forked from gituser/master to sjp and then branched it to sjp/mynewbranch it would look like this:\n\n$ git checkout -b mynewbranch\n$ git branch -a\n  master\n  remotes/sjp/master\n  remotes/sjp/mynewbranch\n$ git fetch (habit to always do before)\n$ git rebase remotes/sjp/mynewbranch\n\n    ", "comments": [], "upvoteCount": 2, "userId": 813905, "date": "2013-07-14 01:30:10Z"}, {"answerId": 12389954, "content": "\r\nA little late to the party, but I think this does the trick:\n\nmkdir YourRepo\ncd YourRepo\ngit init --bare .git                       # create a bare repo\ngit remote add origin REMOTE_URL           # add a remote\ngit fetch origin refs/heads/*:refs/heads/* # fetch heads\ngit fetch origin refs/tags/*:refs/tags/*   # fetch tags\ngit init                                   # reinit work tree\ngit checkout master                        # checkout a branch\n\n\nIf this does something undesirable, I'd love to know. However, so far, this works for me.\n    ", "comments": [{"commentId": 16648807, "content": "According to Note #2 under the refspec section of git fetch (kernel.org/pub/software/scm/git/docs/git-fetch.html), this probably needs to be adjusted.", "date": "2012-09-12 15:25:08Z", "upvoteCount": 0, "userId": 312480}, {"commentId": 25842051, "content": "Do you mean the note beginning, \"You never do your own development on branches that appear on the right hand side of a <refspec> colon\"? And, adjusted, for what reason?", "date": "2013-07-18 15:48:39Z", "upvoteCount": 0, "userId": 1136063}, {"commentId": 25960883, "content": "@MarkDBlackwell, not sure what I meant back then.. to be honest.", "date": "2013-07-22 18:55:35Z", "upvoteCount": 0, "userId": 312480}], "upvoteCount": 0, "userId": 312480, "date": "2012-09-12 14:01:44Z"}, {"answerId": 20095888, "content": "\r\nHere is a bash script for fetching all branches and tags of a git project as snapshots into separate folders. \n\nhttps://gist.github.com/hfossli/7562257\n\nMaybe not what was asked directly, but some people might come here looking for this solution.\n    ", "comments": [], "upvoteCount": 0, "userId": 202451, "date": "2013-11-20 12:22:24Z"}, {"answerId": 50534323, "content": "\r\ngit clone --mirror on the original repo works well for this.\n\ngit clone --mirror /path/to/original.git\ngit remote set-url origin /path/to/new-repo.git\ngit push -u origin\n\n    ", "comments": [], "upvoteCount": 0, "userId": 1106617, "date": "2018-05-25 17:34:43Z"}], "relatedQuestions": ["https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree", "https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch", "https://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit", "https://stackoverflow.com/questions/520650/make-an-existing-git-branch-track-a-remote-branch", "https://stackoverflow.com/questions/927358/how-to-undo-the-most-recent-commits-in-git", "https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch", "https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely", "https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too", "https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch", "https://stackoverflow.com/questions/9537392/git-fetch-remote-branch"]}, "users": [{"pseudo": "Md. Abu Nafee Ibna Zahid", "userId": 3798217, "reputation": 349}, {"pseudo": "Peter Coulton", "userId": 117, "reputation": 22666}, {"pseudo": "sebastian-c", "userId": 1465387, "reputation": 10656}, {"pseudo": "emk", "userId": 12089, "reputation": 46673}, {"pseudo": "Gabe Kopley", "userId": 283398, "reputation": 11144}, {"pseudo": "ypid", "userId": 2239985, "reputation": 782}, {"pseudo": "bigfish", "userId": 583867, "reputation": 3815}, {"pseudo": "olibre", "userId": 938111, "reputation": 23894}, {"pseudo": "Dave", "userId": 915724, "reputation": 2657}, {"pseudo": "Nikos C.", "userId": 856199, "reputation": 31692}, {"pseudo": "xverges", "userId": 239408, "reputation": 2753}, {"pseudo": "murphytalk", "userId": 144330, "reputation": 1043}, {"pseudo": "Luuk Paulussen", "userId": 10394, "reputation": 800}, {"pseudo": "elmarco", "userId": 1277510, "reputation": 13270}, {"pseudo": "Peter Mortensen", "userId": 63550, "reputation": 12506}, {"pseudo": "nobody", "userId": 2383918, "reputation": 469}, {"pseudo": "Samar Kr Mishra", "userId": 1776255, "reputation": 1054}, {"pseudo": "Cerran", "userId": 3198108, "reputation": 973}, {"pseudo": "Steven Penny", "userId": 1002260, "reputation": 1}, {"pseudo": "rapher", "userId": 777553, "reputation": 385}, {"pseudo": "Jacob Fike", "userId": 506537, "reputation": 551}, {"pseudo": "MattoxBeckman", "userId": 10354, "reputation": 2040}, {"pseudo": "Haimei", "userId": 2730862, "reputation": 8181}, {"pseudo": "webmat", "userId": 6349, "reputation": 24360}, {"pseudo": "Tebe", "userId": 758158, "reputation": 1602}, {"pseudo": "FedericoCapaldo", "userId": 3245486, "reputation": 648}, {"pseudo": "Alireza", "userId": 5423108, "reputation": 31476}, {"pseudo": "user43685", "userId": 43685, "reputation": 826}, {"pseudo": "Community", "userId": -1, "reputation": 1}, {"pseudo": "ikaruss", "userId": 1998046, "reputation": 361}, {"pseudo": "raisercostin", "userId": 99248, "reputation": 4503}, {"pseudo": "Phil", "userId": 3432865, "reputation": 126}, {"pseudo": "kenorb", "userId": 55075, "reputation": 53201}, {"pseudo": "gringo_dave", "userId": 545918, "reputation": 528}, {"pseudo": "Albert.Qing", "userId": 770627, "reputation": 2113}, {"pseudo": "ashes999", "userId": 210780, "reputation": 6012}, {"pseudo": "Gaui", "userId": 1053611, "reputation": 3345}, {"pseudo": "jofel", "userId": 1182783, "reputation": 2653}, {"pseudo": "Samuel Liew", "userId": 584192, "reputation": 41395}, {"pseudo": "Camwyn", "userId": 813905, "reputation": 336}, {"pseudo": "Andy", "userId": 312480, "reputation": 3288}, {"pseudo": "hfossli", "userId": 202451, "reputation": 17191}, {"pseudo": "Bernd Jungblut", "userId": 1106617, "reputation": 66}]}