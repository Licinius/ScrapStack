{"question": {"questionId": 927358, "title": "How to undo the most recent commits in Git?", "favoriteCount": 5783, "userId": null, "content": "\r\n\r\nI accidentally committed wrong files to Git, but I haven't pushed the commit to the server yet.\n\nHow can I undo those commits from the local repository? \n    ", "date": null, "upvoteCount": 17431, "tags": ["git", "git-commit", "git-reset", "git-revert", "git", "git-commit", "git-reset", "git-revert"], "selectedAnswer": 927386, "comments": [{"commentId": 48554579, "content": "Warning: you should only do this if you have not yet pushed the commit to a remote, otherwise you will mess up the history of others who have already pulled the commit from the remote!", "date": "2015-05-13 21:18:57Z", "upvoteCount": 0, "userId": 90874}, {"commentId": 49492912, "content": "Here's a very clear and thorough post about undoing things in git, straight from Github.", "date": "2015-06-08 19:39:17Z", "upvoteCount": 0, "userId": 1446845}, {"commentId": 72095415, "content": "See this guide for Git commits undo on Local, Public and Git Branch How to undo Git Commits like pro", "date": "2017-02-27 03:53:19Z", "upvoteCount": 0, "userId": 1939163}, {"commentId": 76131587, "content": "Before you post a new answer, consider there are already 65+ answers for this question. Make sure that your answer contributes what is not among existing answers.", "date": "2017-06-15 15:26:36Z", "upvoteCount": 0, "userId": 1084174}, {"commentId": 81101052, "content": "What @thSoft said is correct, pushing your commits and then git reset --bla foo requires you a git --force push [--all] [somewhere-else-than-origin]. Note that this is a \"forced-push\" which requires other people do a \"forced-update\". They should not use git pull as this implies a merge, but use git fetch [--all] and then git rebase origin/master (assume that the forced-update came from origin). All [bla] are optional parameters but sometimes needed, for example when you push to more than just one remote repository.", "date": "2017-11-02 13:21:44Z", "upvoteCount": 0, "userId": 8401926}], "answers": [{"answerId": 927386, "content": "\r\nUndo a commit and redo\n\n$ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)\n\n\n\nThis is what you want to undo\nThis leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status, and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message1, you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1) but leaves your existing changes staged.\nMake corrections to working tree files.\ngit add anything that you want to include in your new commit.\nCommit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.\n\n\n\n\n1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message. The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend, which will open your default commit message editor pre-populated with the last commit message. \n\nBeware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.\n\n---- Edit by Frank R. 2018-3-9\n\nIf the code is already pushed to your server and you have permissions to overwrite history (rebase) then:\n\ngit push origin master --force\n\n\n\n\nYou can also look at this answer:\nHow to move HEAD back to a previous location? (Detached head)\n\nThe above answer will show you git reflog which is used to find out what is the SHA-1 which you wish to revert to. Once you found the point to which you wish to undo to use the sequence of commands as explained above.\n    ", "comment": [{"commentId": 4110794, "content": "And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do.", "date": "2010-10-05 15:44:20Z", "upvoteCount": 0, "userId": 10259}, {"commentId": 6443962, "content": "If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1.  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1.", "date": "2011-04-13 14:15:10Z", "upvoteCount": 0, "userId": 5486}, {"commentId": 9674538, "content": "Also, in zsh you have to quote ^, so git reset --soft 'HEAD^'... at least I did", "date": "2011-10-27 18:24:16Z", "upvoteCount": 0, "userId": 176841}, {"commentId": 10020433, "content": "(Correction to what I wrote above; --mixed is the default.  --mixed means to keep the changed files, but not keep them in the index.  --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.)", "date": "2011-11-17 02:40:53Z", "upvoteCount": 0, "userId": 5486}, {"commentId": 21084878, "content": "zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^", "date": "2013-02-21 17:47:56Z", "upvoteCount": 0, "userId": 166128}], "upvoteCount": 18715}, {"answerId": 6866485, "content": "\r\nUndoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.\n\nSay you have this, where C is your HEAD and (F) is the state of your files.\n\n   (F)\nA-B-C\n    \u2191\n  master\n\n\nYou want to nuke commit C and never see it again.  You do this:\n\ngit reset --hard HEAD~1\n\n\nThe result is:\n\n (F)\nA-B\n  \u2191\nmaster\n\n\nNow B is the HEAD.  Because you used --hard, your files are reset to their state at commit B.\n\nAh, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:\n\n   (F)\nA-B-C\n    \u2191\n  master\n\n\nYou can do this, leaving off the --hard:\n\ngit reset HEAD~1\n\n\nIn this case the result is:\n\n   (F)\nA-B-C\n  \u2191\nmaster\n\n\nIn both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1, you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!\n\nFor the lightest touch, you can even undo your commit but leave your files and your index:\n\ngit reset --soft HEAD~1\n\n\nThis not only leaves your files alone, it even leaves your index alone.  When you do git status, you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.\n\nOne more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all?  Tough luck, right?\n\nNope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:\n\ngit checkout -b someNewBranchName shaYouDestroyed\n\n\nYou've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of.\n    ", "comment": [{"commentId": 11945697, "content": "@dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS.", "date": "2012-02-25 15:02:44Z", "upvoteCount": 0, "userId": 5486}, {"commentId": 14630150, "content": "Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id>. Saves having to re-create commits!", "date": "2012-06-22 13:11:11Z", "upvoteCount": 0, "userId": 210945}, {"commentId": 14720371, "content": "For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options.", "date": "2012-06-26 15:56:52Z", "upvoteCount": 0, "userId": 282843}, {"commentId": 14896088, "content": "It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git.", "date": "2012-07-03 19:13:35Z", "upvoteCount": 0, "userId": 618369}, {"commentId": 29556901, "content": "Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin :", "date": "2013-11-08 23:43:18Z", "upvoteCount": 0, "userId": 175169}], "upvoteCount": 9600}, {"answerId": 6376039, "content": "\r\nThis took me a while to figure out, so maybe this will help someone...\n\nThere are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):\n\nHow to undo a local commit\n\nLet's say I committed locally, but now want to remove that commit.\n\ngit log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want\n\n\nTo restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD:\n\ngit reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made\n\n\nNow git log will show that our last commit has been removed.\n\nHow to undo a public commit\n\nIf you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).\n\ngit revert HEAD\n\n\nYour changes will now be reverted and ready for you to commit:\n\ngit commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need\n\n\nFor more info, check out Git Basics - Undoing Things\n    ", "comment": [{"commentId": 7916341, "content": "I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :)", "date": "2011-07-14 08:32:53Z", "upvoteCount": 0, "userId": 149008}, {"commentId": 31457718, "content": "@riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\"", "date": "2014-01-06 08:37:25Z", "upvoteCount": 0, "userId": 1069083}, {"commentId": 83898855, "content": "This was most helpful to me. I needed to know how to revert a public commit. Thanks!", "date": "2018-01-25 22:25:02Z", "upvoteCount": 0, "userId": 2482605}], "upvoteCount": 1695}, {"answerId": 927397, "content": "\r\nAdd/remove files to get things the way you want:\n\ngit rm classdir\ngit add sourcedir\n\n\nThen amend the commit:\n\ngit commit --amend\n\n\nThe previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.\n\nNote that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally.\n    ", "comment": [{"commentId": 6993499, "content": "Does this work when I did a git commit --amend and what I really meant to do is a git commit?", "date": "2011-05-18 13:07:31Z", "upvoteCount": 0, "userId": 569885}, {"commentId": 6994993, "content": "@dbm, if you accidentally amended, use git reset --soft <oldref>, where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit.", "date": "2011-05-18 14:20:48Z", "upvoteCount": 0, "userId": 36723}, {"commentId": 11415571, "content": "@Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\".", "date": "2012-02-01 03:08:06Z", "upvoteCount": 0, "userId": 36723}], "upvoteCount": 1602}, {"answerId": 927378, "content": "\r\ngit rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"\n\n\nor\n\ngit reset --hard HEAD~1\n\n\nWarning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.\n\nThe hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit.\n    ", "comment": [{"commentId": 735260, "content": "\"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit.", "date": "2009-05-29 18:26:59Z", "upvoteCount": 0, "userId": 62130}, {"commentId": 6481421, "content": "You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler.", "date": "2011-04-15 13:33:03Z", "upvoteCount": 0, "userId": 138881}, {"commentId": 37635032, "content": "git commit -a -m \"\" or git commit -am \"\" naturally! :]", "date": "2014-06-21 16:31:59Z", "upvoteCount": 0, "userId": 1469208}, {"commentId": 56081980, "content": "Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash, then git stash pop", "date": "2015-12-08 22:30:29Z", "upvoteCount": 0, "userId": 2555263}], "upvoteCount": 849}, {"answerId": 3377569, "content": "\r\nTo change the last commit\n\nReplace the files in the index:\n\ngit rm --cached *.class\ngit add *.java\n\n\nThen, if it's a private branch, amend the commit:\n\ngit commit --amend\n\n\nOr, if it's a shared branch, make a new commit:\n\ngit commit -m 'Replace .class files with .java files'\n\n\n\n(to change a previous commit, use the awesome interactive rebase)\n\n\n\nProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.\n\n\n\nTo revert a commit\n\nAmending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset.\n\nYou can reset git to any commit with:\n\ngit reset @~N\n\n\nWhere N is the number of commits before HEAD, and @~ resets to the previous commit.\n\nSo, instead of amending the commit, you could use:\n\ngit reset @~\ngit add *.java\ngit commit -m \"Add .java files\"\n\n\nCheck out git help reset, specifically the sections on --soft --mixed and --hard, for a better understanding of what this does.\n\nReflog\n\nIf you mess up, you can always use the reflog to find dropped commits:\n\n$ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started\n\n\n\n    ", "comment": [], "upvoteCount": 664}, {"answerId": 10757800, "content": "\r\nUse git revert commit-id\n\nTo get the commit ID, just use git log\n    ", "comment": [{"commentId": 14742152, "content": "If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit.", "date": "2012-06-27 11:02:58Z", "upvoteCount": 0, "userId": 22237}, {"commentId": 44262353, "content": "What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch?", "date": "2015-01-13 22:05:57Z", "upvoteCount": 0, "userId": 943022}, {"commentId": 57732857, "content": "I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes.", "date": "2016-01-25 21:07:16Z", "upvoteCount": 0, "userId": 3502119}, {"commentId": 67592334, "content": "I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party.", "date": "2016-10-20 18:19:50Z", "upvoteCount": 0, "userId": 1803879}], "upvoteCount": 533}, {"answerId": 14620228, "content": "\r\nIf you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.\n\ngit reset --hard HEAD^1\n\n\n(This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add) then do the following command.\n\ngit reset --soft HEAD^1\n\n\nNow your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command\n\ngit reset HEAD\n\n\nNow committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.\n\nMore\n    ", "comment": [{"commentId": 56283123, "content": "@SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d.", "date": "2015-12-14 15:34:11Z", "upvoteCount": 0, "userId": 1996609}, {"commentId": 85574665, "content": "clear and easy to understand, save my night !", "date": "2018-03-14 19:10:32Z", "upvoteCount": 0, "userId": 5809937}, {"commentId": 86491044, "content": "Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies.", "date": "2018-04-09 17:20:46Z", "upvoteCount": 0, "userId": 152876}], "upvoteCount": 427}, {"answerId": 8487487, "content": "\r\nIf you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits.\n    ", "comment": [], "upvoteCount": 419}, {"answerId": 10044540, "content": "\r\nI wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.\n\nprompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt>\n\n    ", "comment": [{"commentId": 18924301, "content": "Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too.", "date": "2012-12-07 16:02:12Z", "upvoteCount": 0, "userId": 425313}, {"commentId": 18944655, "content": "Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently.", "date": "2012-12-08 14:14:43Z", "upvoteCount": 0, "userId": 78336}, {"commentId": 26496284, "content": "\"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451", "date": "2013-08-07 10:10:25Z", "upvoteCount": 4, "userId": 334451}, {"commentId": 37610757, "content": "fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :)", "date": "2014-06-20 15:31:54Z", "upvoteCount": 0, "userId": 1220243}], "upvoteCount": 387}, {"answerId": 13061212, "content": "\r\nI prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right.\n\nChoose how many commits you want to list, then invoke like this (to enlist last three)\n\ngit rebase -i HEAD~3\n\n\nSample list\n\npick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support\n\n\nThen git will remove commits for any line that you remove.\n    ", "comment": [], "upvoteCount": 374}, {"answerId": 16175525, "content": "\r\nHow to fix the previous local commit\n\nUse git-gui (or similar) to perform a git commit --amend. From the GUI you can add or remove individual files from the commit. You can also modify the commit message. \n\nHow to undo the previous local commit\n\nJust reset your branch to the previous location (for example, using gitk or git rebase). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1.\n\nWord of warning: Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.\n\nHow to undo a public commit\n\nPerform a reverse cherry pick (git-revert) to undo the changes.\n\nIf you haven't yet pulled other changes onto your branch, you can simply do...\n\ngit revert --no-edit HEAD\n\n\nThen push your updated branch to the shared repository.\n\nThe commit history will show both commits, separately.\n\n\n\nAdvanced: Correction of private branch in public repository\n\nThis can be dangerous -- be sure you have a local copy of the branch to repush.\n\nAlso note: You don't want to do this if someone else may be working on the branch.\n\ngit push --delete (branch_name) ## remove public version of branch\n\n\nCleanup your branch locally then repush...\n\ngit push origin (branch_name)\n\n\nIn the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history.\n    ", "comment": [{"commentId": 41533928, "content": "gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit.", "date": "2014-10-18 23:38:11Z", "upvoteCount": 4, "userId": 86967}, {"commentId": 52649525, "content": "It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset", "date": "2015-09-04 04:52:01Z", "upvoteCount": 2, "userId": 85306}, {"commentId": 60449136, "content": "See also: stackoverflow.com/a/30598953", "date": "2016-04-05 04:20:04Z", "upvoteCount": 0, "userId": 86967}, {"commentId": 86082673, "content": "I think 'private'/'public' would more correctly be 'local'/'remote'.", "date": "2018-03-28 14:59:27Z", "upvoteCount": 0, "userId": 86967}], "upvoteCount": 349}, {"answerId": 25638420, "content": "\r\nIf you have committed junk but not pushed,\n\ngit reset --soft HEAD~1\n\n\n\n  HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.\n  \n  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \"--hard\" instead.\n\n\nOR\n\n\n  If you already pushed and someone pulled which is usually my case, you can't use git reset. You can however do a git revert,\n\n\ngit revert HEAD\n\n\n\n  This will create a new commit that reverses everything introduced by the accidental commit.\n\n    ", "comment": [{"commentId": 42343566, "content": "I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions?", "date": "2014-11-12 19:36:02Z", "upvoteCount": 0, "userId": 892487}, {"commentId": 43133073, "content": "Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit.", "date": "2014-12-07 00:38:49Z", "upvoteCount": 1, "userId": 191246}], "upvoteCount": 291}, {"answerId": 16609755, "content": "\r\nIf you want to permanently undo it and you have cloned some repository \n\nThe commit id can be seen by \n\ngit log \n\n\nThen you can do -\n\ngit reset --hard <commit_id>\n\ngit push origin <branch_name> -f\n\n    ", "comment": [{"commentId": 77703607, "content": "Should be marked as answer, because you can specify which SHA you want.", "date": "2017-07-28 10:49:14Z", "upvoteCount": 1, "userId": 5508693}, {"commentId": 79872792, "content": "What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\".", "date": "2017-09-27 23:30:18Z", "upvoteCount": 0, "userId": 4242086}, {"commentId": 79895034, "content": "@JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA", "date": "2017-09-28 13:10:31Z", "upvoteCount": 1, "userId": 2349141}, {"commentId": 85096400, "content": "Really like -f. This is what other answers lack", "date": "2018-03-01 08:58:05Z", "upvoteCount": 0, "userId": 4786315}], "upvoteCount": 286}, {"answerId": 17362437, "content": "\r\nOn SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.\n\nOn the terminal:\n\nYou may alternatively use:\n\ngit revert\n\n\nOr:\n\ngit reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes.\n\n    ", "comment": [], "upvoteCount": 243}, {"answerId": 22199804, "content": "\r\nA single command:\n\ngit reset --soft 'HEAD^' \n\n\nIt works great to undo the last local commit!\n    ", "comment": [{"commentId": 35557657, "content": "I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt.", "date": "2014-04-23 09:13:35Z", "upvoteCount": 0, "userId": 957286}, {"commentId": 68310421, "content": "It should work without any quotes.", "date": "2016-11-10 19:19:44Z", "upvoteCount": 0, "userId": 576372}], "upvoteCount": 229}, {"answerId": 44672195, "content": "\r\nJust reset it doing the command below using git:\n\ngit reset --soft HEAD~1\n\n\nExplain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^), it will go back only one commit which what you want...\n\nI create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:\n\n\n    ", "comment": [], "upvoteCount": 200}, {"answerId": 23242764, "content": "\r\nHow to undo the last Git commit?\n\nTo restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.\n\n\nIf you don't want to keep your changes that you made:\n\ngit reset --hard HEAD^\n\nIf you want to keep your changes:\n\ngit reset --soft HEAD^\n\n\n\nNow check your git log. It will show that our last commit has been removed.\n    ", "comment": [], "upvoteCount": 196}, {"answerId": 20960584, "content": "\r\nUse reflog to find a correct state\n\ngit reflog\n\n\n\nREFLOG BEFORE RESET\n\nSelect the correct reflog (f3cb6e2 in my case) and type \n\ngit reset --hard f3cb6e2\n\n\nAfter that the repo HEAD will be reset to that HEADid\n\nLOG AFTER RESET\n\nFinally the reflog looks like the picture below\n\n\nREFLOG FINAL\n    ", "comment": [], "upvoteCount": 161}, {"answerId": 19159566, "content": "\r\n\"Reset the working tree to the last commit\"\n\ngit reset --hard HEAD^ \n\n\n\"Clean unknown files from the working tree\"\n\ngit clean    \n\n\nsee - Git Quick Reference\n\nNOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013\n    ", "comment": [], "upvoteCount": 146}, {"answerId": 19320941, "content": "\r\nFirst run: \n\ngit reflog\n\n\nIt will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.\n\nThen do:\n\ngit reset --hard ActionIdFromRefLog\n\n    ", "comment": [], "upvoteCount": 143}, {"answerId": 16527510, "content": "\r\nAnother way:\n\nCheckout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".\n\nThen navigate to your repository's local directory and run this command:\n\ngit -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\n\n\nThis will erase all commits after the current one in your local repository but only for that one branch.\n    ", "comment": [], "upvoteCount": 128}, {"answerId": 35826537, "content": "\r\nUndo last commit:\n\ngit reset --soft HEAD^ or git reset --soft HEAD~\n\nThis will undo the last commit.\n\nHere --soft means reset into staging.\n\nHEAD~ or HEAD^ means to move to commit before HEAD.\n\n\n\nReplace last commit to new commit:\n\ngit commit --amend -m \"message\"\n\n\nIt will replace the last commit with the new commit.\n    ", "comment": [], "upvoteCount": 124}, {"answerId": 16565962, "content": "\r\nType git log and find the last commit hash code and then enter:\n\ngit reset <the previous co>\n\n    ", "comment": [], "upvoteCount": 122}, {"answerId": 17716319, "content": "\r\nIn my case I accidentally committed some files I did not want to. So I did the following and it worked:\n\ngit reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD\n\n\nVerify the results with gitk or git log --stat\n    ", "comment": [], "upvoteCount": 119}, {"answerId": 25811069, "content": "\r\nThere are two main scenarios\n\nYou haven't pushed the commit yet\n\nIf the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend\n\ngit rm <pathToFile>\n\n\nYou can also remove entire directories with -r, or even combine with other Bash commands\n\ngit rm -r <pathToDirectory>\ngit rm $(find -name '*.class')\n\n\nAfter removing the files, you can commit, with --amend option\n\ngit commit --amend -C HEAD # the -C option is to use the same commit message\n\n\nThis will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.\n\nYou already pushed the commit\n\nYou can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).\n\nInstead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit).\n    ", "comment": [], "upvoteCount": 105}, {"answerId": 18516122, "content": "\r\nUse SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it.\n    ", "comment": [], "upvoteCount": 104}, {"answerId": 34635179, "content": "\r\nSimple, run this in your command line:\n\ngit reset --soft HEAD~ \n\n    ", "comment": [], "upvoteCount": 91}, {"answerId": 25553225, "content": "\r\nTo reset to the previous revision, permanently deleting all uncommitted changes: \n\ngit reset --hard HEAD~1\n\n    ", "comment": [{"commentId": 42733563, "content": "Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further.", "date": "2014-11-24 22:35:29Z", "upvoteCount": 0, "userId": 455269}, {"commentId": 42733703, "content": "If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026, stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959.", "date": "2014-11-24 22:40:57Z", "upvoteCount": 4, "userId": 455269}, {"commentId": 46131721, "content": "Use --soft to keep your changes as uncommitted changes, --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet.", "date": "2015-03-09 09:11:06Z", "upvoteCount": 0, "userId": 936957}, {"commentId": 66277381, "content": "@Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are, as you said, completely thrown away by git reset --hard.", "date": "2016-09-13 21:17:10Z", "upvoteCount": 0, "userId": 455269}, {"commentId": 66277535, "content": "As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information).", "date": "2016-09-13 21:22:52Z", "upvoteCount": 0, "userId": 455269}], "upvoteCount": 84}, {"answerId": 21615125, "content": "\r\nThis article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):\n\nhttp://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\n\nFrom the article, the easiest command I saw to revert a previous commit by its commit id, was:\n\ngit revert dd61ab32\n\n    ", "comment": [], "upvoteCount": 78}], "relatedQuestions": ["https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree", "https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits", "https://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit", "https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files", "https://stackoverflow.com/questions/1628563/move-the-most-recent-commits-to-a-new-branch-with-git", "https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch", "https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely", "https://stackoverflow.com/questions/2765421/how-do-i-push-a-new-local-branch-to-a-remote-git-repository-and-track-it-too", "https://stackoverflow.com/questions/4114095/how-to-revert-git-repository-to-a-previous-commit", "https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch"]}, "users": []}